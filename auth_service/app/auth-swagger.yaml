swagger: '2.0'
info:
  version: '1.0.0'
  title: Swagger ReST Article
  description: This is the swagger file that goes with our server code
  contact: {}
basePath: /api
securityDefinitions: {}
schemes: []
consumes:
- application/json
produces:
- application/json
paths:
  /login:
    post:
      description: Attempt login by querying reg. users db for credentials If success -> Get JWT and authenticate, (rval>=200) If fail -> Login failure (rval>=400)
      summary: index.login
      tags:
      - User
      operationId: index.login
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: body
        in: body
        required: true
        description: Login credentials
        schema:
          $ref: '#/definitions/LoginRequest'
      responses:
        200:
          description: Successfully logged in
          schema:
            $ref: '#/definitions/LoginResponse'
          headers: {}
  /register:
    post:
      description: Attempt register by querying reg. users db for credentials If exists(user) -> Register User Fails (rval>=400), If not exist -> Insert data into reg. users db (rval>=200)
      summary: index.register
      tags:
      - User
      operationId: index.register
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: body
        in: body
        required: true
        description: Register credentials
        schema:
          $ref: '#/definitions/RegisterRequest'
      responses:
        200:
          description: Successfully registered user
          headers: {}
definitions:
  LoginRequest:
    title: LoginRequest
    type: object
    properties:
      email:
        type: string
      password:
        type: string
  LoginResponse:
    title: LoginResponse
    type: object
    properties:
      token:
        type: string
      email:
        type: string
    required:
    - token
  RegisterRequest:
    title: RegisterRequest
    type: object
    properties:
      name:
        type: string
      email:
        type: string
      password:
        type: string
tags:
- name: User
  description: ''
