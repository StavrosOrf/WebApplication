openapi: 3.0.0
info:
  description: This is the swagger file that goes with our server code
  version: 1.0.0
  title: Swagger ReST Article

paths:
  /login:
    post:
      operationId: index.login
      tags:
        - Authorization
      summary: Login User
      description: Attempt login by querying reg. users db [Login]
        If reg_users.exists(user) -> Get JWT and authenticate, (rval>=200) 
        If !reg_users.exists(user) -> Login failure (rval>=400)
      requestBody:
        $ref: "#/components/requestBodies/login"
      responses:
        "200":
          description: Successfully logged in
          content:
            application/json:
              schema:
                required:
                  - token
                properties:
                  token:
                    type: string

  /logout/{my_email}:
    get:
      operationId: index.logout
      tags:
        - Authorization
      summary: Logout User
      description: Attempt to log out user by querying logged in users db [Logout]
        If logged_in_users.delete(email, token) -> Log out, (rval>=200) 
        If !logged_in_users.delete(email, token) -> Fail (rval>=400)
      security:
        - jwt:
            []
      parameters:
        - name: my_email
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully logged out
        
  /register:
    post:
      operationId: index.register
      tags:
        - Authorization
      summary: Register User
      description: Attempt register by querying reg. users db [Register]
        If reg_users.exists(user) -> Register User Fails (rval>=400), 
        If !reg_users.exists(user) -> Insert data into reg. users db (rval>=200)
      requestBody:
        $ref: "#/components/requestBodies/register"
      responses:
        "200":
          description: Successfully registered user
          
  /authenticate/{my_email}:
    get:
      operationId: index.authenticate
      tags:
        - Authorization
      summary: Authenticate request
      description: Authenticate request by querying logged in users db
        If logged_in_users.exists(email, token) -> Authenticate (rval>=200),
        If !logged_in_users.exists(email, token) -> Fail (rval>=400)
      security:
        - jwt:
            []
      parameters:
        - name: my_email
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully authenticated request
        "400":
          description: Failed to authenticated request
  
servers:
  - url: /api
components:
  requestBodies:
    login:
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
              password:
                type: string
      required: true
    
    register:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
              email:
                type: string
              password:
                type: string
      required: true

  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: index.decode_token
